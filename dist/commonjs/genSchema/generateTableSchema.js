"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateTableSchema = void 0;
const node_fs_1 = require("node:fs");
const node_path_1 = require("node:path");
const mkdirp_1 = require("mkdirp");
const rimraf_1 = require("rimraf");
const getAllTableNames_js_1 = require("../database/getAllTableNames.js");
const getTableFields_js_1 = require("../database/getTableFields.js");
const toCamelCase_js_1 = require("../helper/toCamelCase.js");
const toUpperCamelCase_js_1 = require("../helper/toUpperCamelCase.js");
const getSchemaStringFromDefinition_js_1 = require("./getSchemaStringFromDefinition.js");
const generateTableSchema = async (outFolder) => {
    const genSchemaFolder = (0, node_path_1.resolve)(outFolder, '_generated');
    const tableNames = await (0, getAllTableNames_js_1.getAllTableNames)();
    console.log('Generating schema in', genSchemaFolder);
    for (const name of tableNames) {
        const tableName = (0, toCamelCase_js_1.toCamelCase)(name);
        const tableSchemaFolder = (0, node_path_1.resolve)(genSchemaFolder, tableName);
        console.log(`ðŸ‘‰ [${tableName}]: ${tableSchemaFolder}`);
        await (0, rimraf_1.rimraf)(tableSchemaFolder);
        await (0, mkdirp_1.mkdirp)(tableSchemaFolder);
        const fields = await (0, getTableFields_js_1.getTableFields)(tableName);
        const genSchemaFileName = (0, node_path_1.resolve)(tableSchemaFolder, `${(0, toCamelCase_js_1.toCamelCase)(tableName)}SchemaGen.ts`);
        const genSchemaFile = (0, node_fs_1.createWriteStream)(genSchemaFileName);
        const inputFields = Object.entries(fields)
            .map(([name, definition]) => {
            return ` "${name}": ${(0, getSchemaStringFromDefinition_js_1.getSchemaStringFromDefinition)(definition, true)}`;
        })
            .join(',\n');
        const outputFields = Object.entries(fields)
            .map(([name, definition]) => {
            return ` "${name}": ${(0, getSchemaStringFromDefinition_js_1.getSchemaStringFromDefinition)(definition, false)}`;
        })
            .join(',\n');
        genSchemaFile.write(`// ====================
// DO NOT EDIT THIS FILE!
// This file is autogenerated and will be overwritten during generation!
// ====================

import { z } from "zod";

// the create schema for table ${name}
export const ${tableName}InputSchemaGen = {
${inputFields}
};

// the select schema for table ${name}
export const ${tableName}OutputSchemaGen = {
${outputFields}
};

`);
        genSchemaFile.close();
        console.log(` âœ… [${tableName}]: ${tableName}Schema.ts`);
        /*
        const typesFileName = resolve(tableSchemaFolder,`${tableName}GenTypes.ts`)
        const typesFile = createWriteStream(typesFileName)
    
        typesFile.write(
    `// DO NOT EDIT THIS FILE!
    // This file is autogenerated and will be overwritten during generation!
    
    import { z } from "zod";
    
    import { ${tableName}InputSchemaGen, ${tableName}OutputSchemaGen } from "./${tableName}SchemaGen.js";
    
    // the create type for table ${name}
    export type ${toUpperCamelCase(tableName)}InputGen = z.input<typeof ${tableName}InputSchemaGen>
    
    // the select type for table ${name}
    export type ${toUpperCamelCase(tableName)}OutputGen = z.output<typeof ${tableName}OutputSchemaGen>
    `)
    
        typesFile.close()
        console.log(` âœ… [${tableName}]: ${tableName}GenTypes.ts`)
    */
        const schemaFolder = (0, node_path_1.resolve)(outFolder, 'schema', tableName);
        await (0, mkdirp_1.mkdirp)(schemaFolder);
        const schemaFileName = (0, node_path_1.resolve)(schemaFolder, `${(0, toCamelCase_js_1.toCamelCase)(tableName)}Schema.ts`);
        if (!(0, node_fs_1.existsSync)(schemaFileName)) {
            const sFile = (0, node_fs_1.createWriteStream)(schemaFileName);
            sFile.write(`/* Place your custom changes here */

import { z } from "zod";

import { ${tableName}InputSchemaGen, ${tableName}OutputSchemaGen } from "../../_generated/${tableName}/${tableName}SchemaGen.js";

// payload schema for creating a new ${name} entity
export const ${tableName}CreateSchema = z.object({
  ...${tableName}InputSchemaGen
  // add your custom fields here, which are not part of SurrealDB table schema
  // they are not overwritten by the next run
})

// payload schema for fetching a ${name} entity
export const ${tableName}Schema = z.object({
  ...${tableName}OutputSchemaGen
  // add your custom fields here, which are not part of SurrealDB table schema
  // they are not overwritten by the next run
})
`);
            sFile.close();
        }
        const typeFileName = (0, node_path_1.resolve)(schemaFolder, `${(0, toCamelCase_js_1.toCamelCase)(tableName)}Types.ts`);
        if (!(0, node_fs_1.existsSync)(typeFileName)) {
            const tFile = (0, node_fs_1.createWriteStream)(typeFileName);
            tFile.write(`/* Place your custom changes here */

import { z } from "zod";

import { ${tableName}CreateSchema, ${tableName}Schema } from "./${tableName}Schema.js";

// the create type for table ${name}
export type Create${(0, toUpperCamelCase_js_1.toUpperCamelCase)(tableName)} = z.input<typeof ${tableName}CreateSchema>

// the select type for table ${name}
export type ${(0, toUpperCamelCase_js_1.toUpperCamelCase)(tableName)} = z.output<typeof ${tableName}Schema>
      `);
            tFile.close();
            console.log(` âœ… [${tableName}]: ${tableName}Types.ts`);
        }
    }
};
exports.generateTableSchema = generateTableSchema;
//# sourceMappingURL=generateTableSchema.js.map