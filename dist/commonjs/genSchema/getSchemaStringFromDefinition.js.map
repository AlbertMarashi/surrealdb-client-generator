{"version":3,"file":"getSchemaStringFromDefinition.js","sourceRoot":"","sources":["../../../src/genSchema/getSchemaStringFromDefinition.ts"],"names":[],"mappings":"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","sourcesContent":["import { tokenize } from './tokenize.js'\n\nconst optionalTypeRegex = /option<([^>]*)>/im\nconst stringAssertionRegex = /\\sstring::is::([^)]*)\\(/im\n\nconst getZodTypeFromQLType = (defString: string) => {\n  switch (defString.toLowerCase()) {\n    case 'string':\n      return 'z.string()'\n    case 'datetime':\n      return 'z.string().datetime()'\n    case 'array':\n      return 'z.array(z.unknown())'\n    case 'set':\n      return 'z.array(z.unknown())'\n    case 'number':\n      return 'z.number()'\n    case 'float':\n      return 'z.number()'\n    case 'int':\n      return 'z.number()'\n    case 'decimal':\n      return 'z.number()'\n    case 'bool':\n      return 'z.boolean()'\n    case 'object':\n      return 'z.record(z.unknown(),z.unknown())'\n    case 'record':\n      return 'z.any()'\n    case 'geometry':\n      return 'z.any()'\n    default:\n      return 'z.any()'\n  }\n}\n\nconst addAssertion = (definition: string) => {\n  const match = definition.match(stringAssertionRegex)\n  if (!match) {\n    return ''\n  }\n\n  switch (match[1]?.toLowerCase()) {\n    case 'email':\n      return '.email()'\n    case 'uuid':\n      return '.uuid()'\n    case 'url':\n      return '.url()'\n    default:\n      return ''\n  }\n}\n\nconst convertStringToEnum = (schema: string, definition: string) => {\n  return schema.replace('.string()', '.enum(' + definition + ')')\n}\n\nexport const getSchemaStringFromDefinition = (definition: string, isInputSchema: boolean) => {\n  let schema = 'z.any()'\n  let isOptional = false\n\n  const tokens = tokenize(definition)\n\n  if (!tokens.fieldType) {\n    return schema\n  }\n\n  let defString = tokens.fieldType\n  const optionalDefinition = defString.match(optionalTypeRegex)\n  if (optionalDefinition) {\n    defString = optionalDefinition[1] as string\n    isOptional = true\n  }\n  schema = getZodTypeFromQLType(defString)\n\n  if (defString.toLowerCase() === 'string' && tokens.inside) {\n    schema = convertStringToEnum(schema, tokens.inside)\n  }\n\n  if (defString.toLowerCase() === 'string' && tokens.assert) {\n    schema += addAssertion(tokens.assert)\n  }\n\n  if (isInputSchema && tokens.defaultValue) {\n    isOptional = true\n  }\n\n  if (!isInputSchema && tokens.defaultValue) {\n    isOptional = false\n  }\n\n  if (isOptional) {\n    schema += '.optional().nullable()'\n  }\n\n  return schema\n}\n"]}