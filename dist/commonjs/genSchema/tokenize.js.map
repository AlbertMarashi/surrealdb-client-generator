{"version":3,"file":"tokenize.js","sourceRoot":"","sources":["../../../src/genSchema/tokenize.ts"],"names":[],"mappings":";;;AAAA,MAAM,QAAQ,GAAG,CAAC,KAAa,EAAE,EAAE;IACjC,QAAQ,KAAK,CAAC,WAAW,EAAE,EAAE;QAC3B,KAAK,QAAQ;YACX,OAAO,IAAI,CAAA;QACb,KAAK,OAAO;YACV,OAAO,MAAM,CAAA;QACf,KAAK,IAAI;YACP,OAAO,IAAI,CAAA;QACb,KAAK,OAAO;YACV,OAAO,OAAO,CAAA;QAChB,KAAK,MAAM;YACT,OAAO,WAAW,CAAA;QACpB,KAAK,OAAO;YACV,OAAO,OAAO,CAAA;QAChB,KAAK,SAAS;YACZ,OAAO,cAAc,CAAA;QACvB,KAAK,QAAQ;YACX,OAAO,QAAQ,CAAA;QACjB,KAAK,QAAQ;YACX,OAAO,QAAQ,CAAA;QACjB;YACE,OAAO,SAAS,CAAA;KACnB;AACH,CAAC,CAAA;AAEM,MAAM,QAAQ,GAAG,CAAC,KAAa,EAAE,EAAE;IACxC,MAAM,KAAK,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAA;IAC5C,MAAM,SAAS,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IAElC,MAAM,MAAM,GAA2B;QACrC,IAAI,EAAE,EAAE;QACR,KAAK,EAAE,EAAE;KACV,CAAA;IAED,IAAI,KAAa,CAAA;IACjB,SAAS,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;QACzB,MAAM,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAA;QACxB,IAAI,CAAC,EAAE;YACL,KAAK,GAAG,CAAC,CAAA;YACT,OAAM;SACP;QACD,IAAI,CAAC,KAAK,IAAI,EAAE;YACd,OAAM;SACP;QACD,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,CAAC,IAAI,EAAE,CAAA;IAC7D,CAAC,CAAC,CAAA;IAEF,OAAO,MAQN,CAAA;AACH,CAAC,CAAA;AA/BY,QAAA,QAAQ,YA+BpB","sourcesContent":["const getScope = (value: string) => {\n  switch (value.toUpperCase()) {\n    case 'DEFINE':\n      return null\n    case 'FIELD':\n      return 'name'\n    case 'ON':\n      return null\n    case 'TABLE':\n      return 'table'\n    case 'TYPE':\n      return 'fieldType'\n    case 'VALUE':\n      return 'value'\n    case 'DEFAULT':\n      return 'defaultValue'\n    case 'ASSERT':\n      return 'assert'\n    case 'INSIDE':\n      return 'inside'\n    default:\n      return undefined\n  }\n}\n\nexport const tokenize = (query: string) => {\n  const clean = query.trim().replace(/;$/, '')\n  const wordArray = clean.split(' ')\n\n  const result: Record<string, string> = {\n    name: '',\n    table: '',\n  }\n\n  let scope: string\n  wordArray.forEach((word) => {\n    const c = getScope(word)\n    if (c) {\n      scope = c\n      return\n    }\n    if (c === null) {\n      return\n    }\n    result[scope] = ((result[scope] || '') + ' ' + word).trim()\n  })\n\n  return result as {\n    name: string\n    table: string\n    fieldType?: string\n    assert?: string\n    inside?: string\n    value?: string\n    defaultValue?: string\n  }\n}\n"]}