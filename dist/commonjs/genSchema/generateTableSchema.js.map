{"version":3,"file":"generateTableSchema.js","sourceRoot":"","sources":["../../../src/genSchema/generateTableSchema.ts"],"names":[],"mappings":"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","sourcesContent":["import { createWriteStream, existsSync } from 'node:fs'\nimport { resolve } from 'node:path'\n\nimport { mkdirp } from 'mkdirp'\nimport { rimraf } from 'rimraf'\n\nimport { getAllTableNames } from '../database/getAllTableNames.js'\nimport { getTableFields } from '../database/getTableFields.js'\nimport { toCamelCase } from '../helper/toCamelCase.js'\nimport { toUpperCamelCase } from '../helper/toUpperCamelCase.js'\nimport { getSchemaStringFromDefinition } from './getSchemaStringFromDefinition.js'\n\nexport const generateTableSchema = async (outFolder: string) => {\n  const genSchemaFolder = resolve(outFolder, '_generated')\n  const tableNames = await getAllTableNames()\n\n  console.log('Generating schema in', genSchemaFolder)\n\n  for (const name of tableNames) {\n    const tableName = toCamelCase(name)\n\n    const tableSchemaFolder = resolve(genSchemaFolder, tableName)\n    console.log(`ðŸ‘‰ [${tableName}]: ${tableSchemaFolder}`)\n    await rimraf(tableSchemaFolder)\n    await mkdirp(tableSchemaFolder)\n\n    const fields = await getTableFields(tableName)\n\n    const genSchemaFileName = resolve(tableSchemaFolder, `${toCamelCase(tableName)}SchemaGen.ts`)\n    const genSchemaFile = createWriteStream(genSchemaFileName)\n\n    const inputFields = Object.entries(fields)\n      .map(([name, definition]) => {\n        return ` \"${name}\": ${getSchemaStringFromDefinition(definition, true)}`\n      })\n      .join(',\\n')\n\n    const outputFields = Object.entries(fields)\n      .map(([name, definition]) => {\n        return ` \"${name}\": ${getSchemaStringFromDefinition(definition, false)}`\n      })\n      .join(',\\n')\n\n    genSchemaFile.write(\n      `// ====================\n// DO NOT EDIT THIS FILE!\n// This file is autogenerated and will be overwritten during generation!\n// ====================\n\nimport { z } from \"zod\";\n\n// the create schema for table ${name}\nexport const ${tableName}InputSchemaGen = {\n${inputFields}\n};\n\n// the select schema for table ${name}\nexport const ${tableName}OutputSchemaGen = {\n${outputFields}\n};\n\n`,\n    )\n\n    genSchemaFile.close()\n    console.log(` âœ… [${tableName}]: ${tableName}Schema.ts`)\n\n    /*\n    const typesFileName = resolve(tableSchemaFolder,`${tableName}GenTypes.ts`)\n    const typesFile = createWriteStream(typesFileName)\n\n    typesFile.write(\n`// DO NOT EDIT THIS FILE!\n// This file is autogenerated and will be overwritten during generation!\n\nimport { z } from \"zod\";\n\nimport { ${tableName}InputSchemaGen, ${tableName}OutputSchemaGen } from \"./${tableName}SchemaGen.js\";\n\n// the create type for table ${name}\nexport type ${toUpperCamelCase(tableName)}InputGen = z.input<typeof ${tableName}InputSchemaGen>\n\n// the select type for table ${name}\nexport type ${toUpperCamelCase(tableName)}OutputGen = z.output<typeof ${tableName}OutputSchemaGen>\n`)\n\n    typesFile.close()\n    console.log(` âœ… [${tableName}]: ${tableName}GenTypes.ts`)\n*/\n\n    const schemaFolder = resolve(outFolder, 'schema', tableName)\n    await mkdirp(schemaFolder)\n\n    const schemaFileName = resolve(schemaFolder, `${toCamelCase(tableName)}Schema.ts`)\n\n    if (!existsSync(schemaFileName)) {\n      const sFile = createWriteStream(schemaFileName)\n      sFile.write(`/* Place your custom changes here */\n\nimport { z } from \"zod\";\n\nimport { ${tableName}InputSchemaGen, ${tableName}OutputSchemaGen } from \"../../_generated/${tableName}/${tableName}SchemaGen.js\";\n\n// payload schema for creating a new ${name} entity\nexport const ${tableName}CreateSchema = z.object({\n  ...${tableName}InputSchemaGen\n  // add your custom fields here, which are not part of SurrealDB table schema\n  // they are not overwritten by the next run\n})\n\n// payload schema for fetching a ${name} entity\nexport const ${tableName}Schema = z.object({\n  ...${tableName}OutputSchemaGen\n  // add your custom fields here, which are not part of SurrealDB table schema\n  // they are not overwritten by the next run\n})\n`)\n      sFile.close()\n    }\n\n    const typeFileName = resolve(schemaFolder, `${toCamelCase(tableName)}Types.ts`)\n\n    if (!existsSync(typeFileName)) {\n      const tFile = createWriteStream(typeFileName)\n      tFile.write(`/* Place your custom changes here */\n\nimport { z } from \"zod\";\n\nimport { ${tableName}CreateSchema, ${tableName}Schema } from \"./${tableName}Schema.js\";\n\n// the create type for table ${name}\nexport type Create${toUpperCamelCase(tableName)} = z.input<typeof ${tableName}CreateSchema>\n\n// the select type for table ${name}\nexport type ${toUpperCamelCase(tableName)} = z.output<typeof ${tableName}Schema>\n      `)\n      tFile.close()\n      console.log(` âœ… [${tableName}]: ${tableName}Types.ts`)\n    }\n  }\n}\n"]}