import { createWriteStream, existsSync } from 'node:fs';
import { resolve } from 'node:path';
import { mkdirp } from 'mkdirp';
import { rimraf } from 'rimraf';
import { getAllTableNames } from '../database/getAllTableNames.js';
import { getTableFields } from '../database/getTableFields.js';
import { toCamelCase } from '../helper/toCamelCase.js';
import { toUpperCamelCase } from '../helper/toUpperCamelCase.js';
import { getSchemaStringFromDefinition } from './getSchemaStringFromDefinition.js';
export const generateTableSchema = async (outFolder) => {
    const genSchemaFolder = resolve(outFolder, '_generated');
    const tableNames = await getAllTableNames();
    console.log('Generating schema in', genSchemaFolder);
    for (const name of tableNames) {
        const tableName = toCamelCase(name);
        const tableSchemaFolder = resolve(genSchemaFolder, tableName);
        console.log(`ðŸ‘‰ [${tableName}]: ${tableSchemaFolder}`);
        await rimraf(tableSchemaFolder);
        await mkdirp(tableSchemaFolder);
        const fields = await getTableFields(tableName);
        const genSchemaFileName = resolve(tableSchemaFolder, `${toCamelCase(tableName)}SchemaGen.ts`);
        const genSchemaFile = createWriteStream(genSchemaFileName);
        const inputFields = Object.entries(fields)
            .map(([name, definition]) => {
            return ` "${name}": ${getSchemaStringFromDefinition(definition, true)}`;
        })
            .join(',\n');
        const outputFields = Object.entries(fields)
            .map(([name, definition]) => {
            return ` "${name}": ${getSchemaStringFromDefinition(definition, false)}`;
        })
            .join(',\n');
        genSchemaFile.write(`// ====================
// DO NOT EDIT THIS FILE!
// This file is autogenerated and will be overwritten during generation!
// ====================

import { z } from "zod";

// the create schema for table ${name}
export const ${tableName}InputSchemaGen = {
${inputFields}
};

// the select schema for table ${name}
export const ${tableName}OutputSchemaGen = {
${outputFields}
};

`);
        genSchemaFile.close();
        console.log(` âœ… [${tableName}]: ${tableName}Schema.ts`);
        /*
        const typesFileName = resolve(tableSchemaFolder,`${tableName}GenTypes.ts`)
        const typesFile = createWriteStream(typesFileName)
    
        typesFile.write(
    `// DO NOT EDIT THIS FILE!
    // This file is autogenerated and will be overwritten during generation!
    
    import { z } from "zod";
    
    import { ${tableName}InputSchemaGen, ${tableName}OutputSchemaGen } from "./${tableName}SchemaGen.js";
    
    // the create type for table ${name}
    export type ${toUpperCamelCase(tableName)}InputGen = z.input<typeof ${tableName}InputSchemaGen>
    
    // the select type for table ${name}
    export type ${toUpperCamelCase(tableName)}OutputGen = z.output<typeof ${tableName}OutputSchemaGen>
    `)
    
        typesFile.close()
        console.log(` âœ… [${tableName}]: ${tableName}GenTypes.ts`)
    */
        const schemaFolder = resolve(outFolder, 'schema', tableName);
        await mkdirp(schemaFolder);
        const schemaFileName = resolve(schemaFolder, `${toCamelCase(tableName)}Schema.ts`);
        if (!existsSync(schemaFileName)) {
            const sFile = createWriteStream(schemaFileName);
            sFile.write(`/* Place your custom changes here */

import { z } from "zod";

import { ${tableName}InputSchemaGen, ${tableName}OutputSchemaGen } from "../../_generated/${tableName}/${tableName}SchemaGen.js";

// payload schema for creating a new ${name} entity
export const ${tableName}CreateSchema = z.object({
  ...${tableName}InputSchemaGen
  // add your custom fields here, which are not part of SurrealDB table schema
  // they are not overwritten by the next run
})

// payload schema for fetching a ${name} entity
export const ${tableName}Schema = z.object({
  ...${tableName}OutputSchemaGen
  // add your custom fields here, which are not part of SurrealDB table schema
  // they are not overwritten by the next run
})
`);
            sFile.close();
        }
        const typeFileName = resolve(schemaFolder, `${toCamelCase(tableName)}Types.ts`);
        if (!existsSync(typeFileName)) {
            const tFile = createWriteStream(typeFileName);
            tFile.write(`/* Place your custom changes here */

import { z } from "zod";

import { ${tableName}CreateSchema, ${tableName}Schema } from "./${tableName}Schema.js";

// the create type for table ${name}
export type Create${toUpperCamelCase(tableName)} = z.input<typeof ${tableName}CreateSchema>

// the select type for table ${name}
export type ${toUpperCamelCase(tableName)} = z.output<typeof ${tableName}Schema>
      `);
            tFile.close();
            console.log(` âœ… [${tableName}]: ${tableName}Types.ts`);
        }
    }
};
//# sourceMappingURL=generateTableSchema.js.map